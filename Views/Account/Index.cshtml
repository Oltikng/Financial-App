@model IEnumerable<FinancialApp.Models.Account>

@{
    ViewData["Title"] = "Your Accounts";
    var dailyBalancesJson = ViewData["DailyBalances"];
    var totalBalances = (Dictionary<int, decimal>)ViewData["TotalBalances"];
}

<style>
    body {
        background-color: #eff6ed;
        font-family: Arial, sans-serif;
    }

    .greeting-container {
        text-align: center;
        padding: 20px;
        background-color: #f0f7f5;
        border-radius: 10px;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
        margin: 10px auto;
        max-width: 900px;
    }

        .greeting-container h2 {
            font-size: 24px;
            color: #333;
            margin: 0;
        }

        .greeting-container p {
            font-size: 18px;
            color: #555;
            margin: 10px 0 0;
        }

    .highlight {
        color: #28a745;
        font-weight: bold;
    }

    .container {
        width: 90%;
        max-width: 1200px;
        margin: auto;
        padding: 20px;
    }

    h1 {
        text-align: center;
        color: #333;
        margin-bottom: 30px;
    }

    .btn {
        display: inline-block;
        padding: 10px 20px;
        font-size: 16px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        color: #fff;
        text-decoration: none;
        transition: background-color 0.3s ease;
    }

    .btn-success {
        background-color: #28a745;
    }

    .btn-primary {
        background-color: #007bff;
    }

    .btn-warning {
        background-color: #ffc107;
    }

    .btn-danger {
        background-color: #dc3545;
    }

    .btn-back {
        background-color: grey;
    }

    .btn-primary:hover, .btn-success:hover, .btn-warning:hover, .btn-danger:hover {
        opacity: 0.8;
    }

    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.5);
        z-index: 1000;
        overflow: auto;
        transition: opacity 0.3s ease;
    }

        .modal.show {
            display: block;
            opacity: 1;
        }

    .modal-content {
        position: relative;
        margin: 5% auto;
        padding: 30px;
        background-color: white;
        width: 90%;
        max-width: 800px;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        transition: transform 0.3s ease;
        transform: translateY(-50px);
        opacity: 0;
    }

    .modal.show .modal-content {
        transform: translateY(0);
        opacity: 1;
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

        .modal-header h2 {
            margin: 0;
        }

        .modal-header .close {
            font-size: 30px;
            cursor: pointer;
        }

    .card-container {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
    }

    .card {
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        padding: 20px;
        flex: 1 1 calc(33.333% - 20px);
        margin-bottom: 20px;
        transition: transform 0.2s ease;
    }

        .card:hover {
            transform: translateY(-5px);
        }

    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

        .card-header .icon {
            font-size: 24px;
        }

        .card-header .actions a {
            margin-left: 10px;
        }

    .table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

        .table th, .table td {
            padding: 10px;
            border: 1px solid #ddd;
            text-align: left;
        }

        .table th {
            background-color: #f9f9f9;
        }

        .table tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        .table tr:hover {
            background-color: #ddd;
        }

    .action-links {
        display: flex;
        gap: 10px;
    }

        .action-links a {
            padding: 10px;
            border-radius: 5px;
            color: #fff;
            text-decoration: none;
        }

            .action-links a.edit {
                background-color: #ffc107;
            }

            .action-links a.delete {
                background-color: #dc3545;
            }

            .action-links a.view {
                background-color: #007bff;
            }
</style>

<div class="greeting-container">
    <h2>Hey Mr. <span class="highlight">@ViewData["LastName"]</span>!</h2>
    <p class="call-to-action">Here you can create and manage your Wallets.</p>
    <div class="d-flex justify-content-between align-items-center">
        <button id="openBalancesChartBtn" class="btn btn-success">View Daily Balances</button>
        <a asp-action="Create" asp-controller="Account" class="btn btn-primary">Create Account</a>
    </div>
</div>

<div class="container">
    <!-- Modal for displaying the chart -->
    <div id="balancesChartModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Daily Balances by Account</h2>
                <span id="closeBalancesModalBtn" class="close">&times;</span>
            </div>
            <canvas id="dailyBalancesChart" width="600" height="300"></canvas>
        </div>
    </div>

    <!-- Cards for Accounts -->
    <div class="card-container">
        @foreach (var account in Model)
        {
            var totalBalance = totalBalances.ContainsKey(account.Id) ? totalBalances[account.Id] : 0;
            <div class="card">
                <div class="card-header">
                    <span class="icon">@account.Icon</span>
                    <div class="actions">
                        <a asp-controller="Transactions" asp-action="Index" asp-route-accountId="@account.Id" class="btn btn-primary">View Transactions</a>
                    </div>
                </div>
                <h3>@account.Name</h3>
                <p>Category: @account.Category</p>
                <p>Balance: @totalBalance EUR</p>
                <div class="action-links">
                    <a asp-action="Edit" asp-route-id="@account.Id" class="edit">Edit</a>
                    <a asp-action="Delete" asp-route-id="@account.Id" class="delete">Delete</a>
                </div>
            </div>
        }
    </div>

    <p>
        <a asp-action="Index" asp-controller="Home" class="btn btn-back">Back to Home Page</a>
        <a asp-action="Index" asp-controller="Transactions" class="btn btn-primary">View All Transactions</a>
    </p>
</div>

@section Scripts
{
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Chart initialization
            var balancesChartCtx = document.getElementById('dailyBalancesChart').getContext('2d');

            var chartData = {
                labels: [],
                datasets: []
            };

            var dailyBalances = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewData["DailyBalances"]));

            if (dailyBalances) {
                dailyBalances.forEach(function (account, index) {
                    var accountName = account.AccountName;
                    var dataPoints = account.Data;
                    var dates = dataPoints.map(function (dp) { return dp.Date; });
                    var balances = dataPoints.map(function (dp) { return dp.Balance; });

                    chartData.labels = Array.from(new Set([...chartData.labels, ...dates]));
                    chartData.datasets.push({
                        label: accountName,
                        data: balances,
                        fill: false,
                        borderColor: getBaseColor(index),
                        tension: 0.1
                    });
                });
            }

            var dailyBalancesChart = new Chart(balancesChartCtx, {
                type: 'line',
                data: chartData,
                options: {
                    scales: {
                        x: {
                            type: 'time',
                            time: {
                                unit: 'day'
                            }
                        },
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });

            function getBaseColor(index) {
                var baseColors = [
                    '#FF5733', // Red-Orange
                    '#33FF57', // Green
                    '#3357FF', // Blue
                    '#FF33A8', // Pink
                    '#FFC300', // Yellow
                    '#DAF7A6', // Light Green
                    '#FF6F61', // Coral
                    '#6B5B95'  // Purple
                ];
                return baseColors[index % baseColors.length];
            }

            // Modal functionality
            var openBalancesChartBtn = document.getElementById('openBalancesChartBtn');
            var balancesChartModal = document.getElementById('balancesChartModal');
            var closeBalancesModalBtn = document.getElementById('closeBalancesModalBtn');

            openBalancesChartBtn.addEventListener('click', function () {
                balancesChartModal.classList.add('show');
            });

            closeBalancesModalBtn.addEventListener('click', function () {
                balancesChartModal.classList.remove('show');
            });

            window.addEventListener('click', function (event) {
                if (event.target === balancesChartModal) {
                    balancesChartModal.classList.remove('show');
                }
            });
        });
    </script>
}